#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
from docx import Document

old_file_path = "/home/axiom/Desktop/工作/程/市监局二级报告20211016/all/"

new_file_path = "/home/axiom/Desktop/工作/程/市监局二级报告20211016/mv/"

replace_dict = {
    "a）应在关键网络节点处对恶意代码进行检测和清除，并维护恶意代码防护机制的升级和更新。" :"恶意代码防范",
    "a）可基于可信根对边界设备的系统引导程序、系统程序、重要配置参数和边界防护应用程序等进行可信验证，并在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。":"可基于可信根对边界设备的系统引导程序、系统程序、重要配置参数和通信应用程序等进行可信验证，并在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。",
    "a）应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换；":"a）应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换 ，具体要求包括：1)系统应为不同用户提供不同的用户身份标识；2)系统的用户名和口令不得相同，用户口令应为数字、字母、特殊字符混合组合；3)用户口令长度应不低于8位；4)系统应具有用户口令定期更新提示和更新确认；5)禁止明文存储口令。",
    "b）应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施；":"b）应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施， 具体要求包括：1)宜限制操作系统同一用户连续登录失败次数为6-10次，具体次数应在相关安全策略中明确；2)登录失败超过规定次数，用户账户应被锁定10分钟，或申请由系统管理员进行密码重置。",
    "c）当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听。":"c）当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听，具体要求包括：应采用SSH、Https、VPN等安全的远程管理方式。",
    "b）应重命名或删除默认账户，修改默认账户的默认口令；":"b）应重命名或删除默认账户，修改默认账户的默认口令，具体要求包括：操作系统应禁用无法重命名或无法删除的默认账户，或阻止默认账户直接远程登录。",
    "a）应对审计管理员进行身份鉴别，只允许其通过特定的命令或操作界面进行安全审计操作，并对这些操作进行审计；":"a）应对安全审计员进行身份鉴别，只允许其通过特定的命令或操作界面进行安全审计操作，并对这些操作进行审计；",
    "b）应通过审计管理员对审计记录进行分析，并根据分析结果进行处理，包括根据安全审计策略对审计记录进行存储、管理和查询等。":"b）应通过安全审计员对审计记录进行分析，并根据分析结果进行处理，包括根据安全审计策略对审计记录进行存储、管理和查询等。",
    "b）应设立系统管理员、审计管理员和安全管理员等岗位，并定义部门及各个工作岗位的职责。":"b）应设立系统管理员、安全审计员和安全管理员等岗位，并定义部门及各个工作岗位的职责。",
    "a）应配备一定数量的系统管理员、审计管理员和安全管理员等。":"a）应配备一定数量的系统管理员、安全审计员和安全管理员等。",
    "a）应确保网络安全产品采购和使用符合国家的有关规定；":"a）应确保网络安全产品采购和使用符合国家的有关规定，具体要求包括：应根据党政机关电子公文系统安全可靠应用推进工作领导小组办公室发布的安全可靠应用相关产品目录采购产品。",
    "b）应确保密码产品与服务的采购和使用符合国家密码管理主管部门的要求。":"b）应确保密码产品与服务的采购和使用符合国家密码管理局的要求。",
    "a）应确保服务供应商的选择符合国家的有关规定；":"a）应确保服务供应商的选择符合国家的有关规定，具体包括：应按照党政机关电子公文应用推进工作领导小组办公室的要求和服务商推荐名录选择服务供应商，如集成服务、软件开发等单位；",
    "b）应使用国家密码管理主管部门认证核准的密码技术和产品。":"b）应使用国家密码管理局认证核准的密码技术和产品。"



}
def check_and_change(document, replace_dict):
    """
    遍历word中的所有 paragraphs，在每一段中发现含有key 的内容，就替换为 value 。 
    （key 和 value 都是replace_dict中的键值对。）
    """
    for para in document.paragraphs:
        for i in range(len(para.runs)):
            for key, value in replace_dict.items():
                if key in para.runs[i].text:
                    print(key+"-->"+value)
                    para.runs[i].text = para.runs[i].text.replace(key, value)
    return document


def main():
    for name in os.listdir(old_file_path):
        print(name)
        old_file = old_file_path + name
        new_file = new_file_path + name
        if old_file.split(".")[1] == 'docx':
            document = Document(old_file)
            document = check_and_change(document, replace_dict)
            document.save(new_file)
        print("^"*30)
if __name__ == '__main__':
    main()
